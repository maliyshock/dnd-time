@use "variables.scss";
@use "sass:math";

@mixin clickable {
	padding: 0;
	border: none;
	&:hover, &:focus, &:active {
		outline: none;
		border: none;
		box-shadow: none;
	}
}

@mixin spin-animation {
	@keyframes spin {
		from {
			transform: rotate(0deg);
		}
		to {
			transform: rotate(360deg);
		}
	}
}

@mixin fadeIn-animation {
	@keyframes fadeIn {
		0% {
			opacity: 0;
		}
		100% {
			opacity: 1;
		}
	}
}

// queries
@mixin for-phone-up {
	@media (min-width: variables.$phoneUp) { @content; }
}

@mixin for-tablet-portrait-up {
	@media (min-width: variables.$tabletPortraitUp) { @content; }
}

@mixin for-tablet-landscape-up {
	@media (min-width: variables.$tabletLandscapeUp) { @content; }
}

@mixin for-desktop-up {
	@media (min-width: variables.$desktopUp) { @content; }
}

// works with rem
@mixin dynamic-size(
	$property,
	$minRemFactor,
	$maxRemFactor,
	$min-width, // in px
) {
	// 100vw = it is like 100% = 360px
	// 1 vw = 3.6
	// 16 * 3 = (16 / 3.6) * 3 = 4.4 * 3 = 13.3
	$vw: math.div(stripUnit($min-width), 100); // 1vw
	$size:  math.div(stripUnit(variables.$fontSizeBase), $vw) * $minRemFactor;

	#{$property}: clamp(#{$minRemFactor}rem, #{$size}VW, #{$maxRemFactor}rem)
}

@function stripUnit($value) {
	@return math.div($value, ($value * 0 + 1));
}

@function rem($pxValue) {
	@return #{math.div(stripUnit($pxValue), stripUnit(variables.$fontSizeBase))}rem;
}

@function rem-to-px($rem-value) {
	@return math.div($rem-value, 1rem) * variables.$fontSizeBase;
}


@mixin pulse-animation($name: pulse-animation, $min: 0.7, $max: 1, $opacity: 0.3) {
	@keyframes #{$name} {
		0% {
			opacity: 1;
			transform: scale($max)
		}
		50% {
			opacity: $opacity;
			transform: scale($min)
		}
		100% {
			opacity: 1;
			transform: scale($max)
		}
	}
}

@mixin spin-reverse-animation {
	@keyframes spin-reverse-animation {
		from {
			transform: rotate(360deg);
		}
		to {
			transform: rotate(0deg);
		}
	}
}
